
<!--
/*
 * Copyright (c)2004 Mark Logic Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * The use of the Apache License does not indicate that this project is
 * affiliated with the Apache Software Foundation.
 */
-->

<project name="xqrunner" default="all" basedir=".">

	<property name="product.name" value="xqrunner"/>
	<property name="release.version" value="0.8.0"/>

	<!-- Static definitions of where things are relative to the root -->
	<property name="src.root" value="src"/>
	<property name="java.source" value="${src.root}/java"/>
	<property name="junit.source" value="${src.root}/junit"/>
	<property name="config.source" value="${src.root}/config"/>
	<property name="images.source" value="${src.root}/images"/>
	<property name="doc.source" value="${src.root}/docs"/>
	<property name="buildtmp" value="buildtmp"/>
	<property name="compiled.classes.dir" value="${buildtmp}/classes"/>
	<property name="generated.files" value="${buildtmp}/generated"/>
	<property name="javadoc.dir" value="${buildtmp}/javadocs"/>

	<!-- Jar files that are under source control in this tree -->
	<property name="jarlib" value="src/lib"/>
	<property name="junit.jar" value="${jarlib}/junit.jar"/>
	<property name="xcc.jar" value="${jarlib}/xcc.jar"/>
	<property name="xdbc.jar" value="${jarlib}/xdbc.jar"/>
	<property name="xdmp.jar" value="${jarlib}/xdmp.jar"/>
	<property name="jdom.jar" value="${jarlib}/jdom.jar"/>

	<!-- Intermediate generated files -->
	<property name="javadoc.zipfile" value="${generated.files}/${product.name}-api.zip"/>
	<property name="code.output.jar" value="${generated.files}/${product.name}.jar"/>

	<!-- Products of this build -->
	<property name="products" value="deliverable"/>
	<property name="release.bundle" value="${products}/${product.name}-${release.version}.zip"/>
	<property name="source.bundle" value="${products}/${product.name}-src-${release.version}.zip"/>

	<!-- Configurable flags that will affect how targets run -->
	<property name="compile.debug.symbols.flag" value="on"/>	<!-- on | off -->
	<property name="junit.halt.on.error" value="off"/>		<!-- on | off -->
	<property name="junit.disabled" value="true"/>			<!-- true | false -->

	<!-- ********************************************************** -->


	<target name="init">
		<mkdir dir="${buildtmp}"/>
		<mkdir dir="${compiled.classes.dir}"/>
		<mkdir dir="${generated.files}"/>
		<mkdir dir="${products}"/>
	</target>

	<target name="clean">
		<delete dir="${buildtmp}"/>
	</target>

	<target name="cleanest" depends="clean">
		<delete dir="${products}"/>
	</target>

	<!-- ********************************************************** -->

	<path id="code.compile.classpath">
		<pathelement path="${xcc.jar}"/>
		<pathelement path="${xdbc.jar}"/>
		<pathelement path="${xdmp.jar}"/>
		<pathelement path="${jdom.jar}"/>
		<pathelement path="${compiled.classes.dir}"/>
	</path>

	<path id="testcases.classpath">
		<pathelement path="${junit.jar}"/>
		<pathelement path="${xcc.jar}"/>
		<pathelement path="${xdbc.jar}"/>
		<pathelement path="${xdmp.jar}"/>
		<pathelement path="${jdom.jar}"/>
		<pathelement path="${compiled.classes.dir}"/>
	</path>

	<path id="xdoclet.classpath">
		<pathelement path="${compiled.classes.dir}"/>
	</path>

	<target name="compile.code" depends="init">
		<javac classpathref="code.compile.classpath" srcdir="${java.source}"
			destdir="${compiled.classes.dir}" deprecation="on"
			debug="${compile.debug.symbols.flag}" />
	</target>

	<target name="compile.tests" depends="compile.code">
		<javac classpathref="testcases.classpath" srcdir="${junit.source}"
			destdir="${compiled.classes.dir}" deprecation="on"
			debug="${compile.debug.symbols.flag}" />
	</target>

	<target name="test.code" depends="compile.tests" unless="junit.disabled" >

		<junit printsummary="on" haltonerror="${junit.halt.on.error}" showoutput="true">
			<classpath refid="testcases.classpath"/>
				<formatter type="plain" usefile="false"/>

				<batchtest fork="no">
						<fileset dir="${junit.source}" includes="**/Test*.java"/>
				</batchtest>
		</junit>
	</target>

	<target name="generate.code.jar" depends="test.code">
		<jar jarfile="${code.output.jar}">
			<fileset dir="${compiled.classes.dir}">
				<exclude name="**/Test*.class"/>
			</fileset>
		</jar>
	</target>

	<target name="code" depends="generate.code.jar"/>

	<!-- ********************************************************** -->

	<target name="javadoc" depends="code">
		<mkdir dir="${javadoc.dir}"/>
		<javadoc sourcepath="${java.source}" destdir="${javadoc.dir}" packagenames="*"
			author="true" version="true" windowtitle="MarkLogic XQRunner">

			<classpath refid="code.compile.classpath"/>
			<doctitle><![CDATA[<h1>Mark Logic XQRunner Library</h1>]]></doctitle>
			<bottom><![CDATA[<i>Copyright &copy; 2004 Mark Logic Corporation, Licensed Under Apache 2.0</i>]]></bottom>
		</javadoc>

		<zip zipfile="${javadoc.zipfile}" basedir="${javadoc.dir}"/>
	</target>

	<!-- ********************************************************** -->

	<target name="binarybundle" depends="init,code,javadoc">
		<zip zipfile="${release.bundle}">
			<fileset dir="${doc.source}">
				<include name="*"/>
			</fileset>
			<fileset file="${code.output.jar}" />
			<fileset dir="${jarlib}">
				<include name="jdom.jar"/>
			</fileset>
			<fileset file="${javadoc.zipfile}" />
		</zip>
	</target>

	<target name="srcbundle">
		<zip zipfile="${source.bundle}">
			<fileset file="build.xml"/>
			<fileset dir=".">
				<include name="src/**"/>
			</fileset>
		</zip>
	</target>

	<!-- ********************************************************** -->

	<target name="all" depends="binarybundle,srcbundle">
		<copy file="${code.output.jar}"  todir="${products}"/>
		<copy file="${doc.source}/README.txt"  todir="${products}"/>
	</target>

</project>
